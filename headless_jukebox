#!/usr/bin/env ruby
# coding: utf-8

require 'rubygems'
require 'bundler/setup'

require 'pp'
require 'io/console'

require 'open3'
require 'benchmark'

# require 'headless-jukebox'

def run_cmd(command_str)
  puts 'Run external program:      ' + command_str
  # stdout = system(command_str) ; result=$?.success?
  stdout = Open3.popen3(command_str) { |stdin, stdout, stderr, wait_thr| stdout.read }
  puts 'External program returned: >> ' + stdout + ' <<'
  # raise "Command failed: " + command_str if result != true
  return stdout
end

def video_feed_url_to_video_url(feed_url)
  run_cmd('curl -s ' + feed_url + ' | grep ".h264.mp4" | cut -f 2 -d "\"" |head -n 1')
    .gsub("\n", '')
end

platform_list = [
  :raspberry,
  :pc
]

# TODO: Better separation. Currently all ARM boards are recognized as Raspberry Pis.
def platform()
  arch, os, abi = RUBY_PLATFORM.split('-')
  case arch
  when 'x86_64'
    :pc
  when 'arm'
    :raspberry
  else
    raise 'Unknown platform'
  end
end


required_modules = {
  :raspberry => [
    'mpv', 'omxplayer'
  ],
  :pc => [
    'mpv'
  ]
}

$detailed_application_command = {
  :mpv_audio_stream => ['mpv',  'command',          'loadfile'],
  :mpv_video_stream => ['mpv',  'command',          'loadfile'],
  :mpv_audio_file   => ['mpv',  'command',          'loadfile'],
  :mpv_set_volume   => ['mpv',  'mpv_set_property', 'ao-volume'],


  :omx_audio_stream => ['omx',  'command',          'loadfile'],
  :omx_video_stream => ['omx',  'command',          'loadfile'],
  :omx_audio_file   => ['omx',  'command',          'loadfile'],


  :alsa_set_volume  => ['alsa', 'set'],
}

$platform_application_mapping = {
  :pc => {
    :audio_stream => :mpv_audio_stream,
    :video_stream => :mpv_video_stream,
    :audio_file   => :mpv_audio_file,
    :set_volume   => :mpv_set_volume
  },
  :raspberry => {
    :audio_stream => :mpv_audio_stream,
    :video_stream => :omx_video_stream,
    :audio_file   => :mpv_audio_file,
    :set_volume   => :alsa_set_volume
  }
}

def mpv_callback(event)
  puts "mpv: #{event.to_s}"
end

def omx_callback(event)
  puts "omx: #{event.to_s}"
end

def load_modules(module_list)
  module_list.each { |module_name|
    puts "Load module: " + module_name
    require module_name
  }
end

def platform_mapping(platform, command_type)
  raise "platform is nil" if platform.nil?
  raise "command_type is nil" if command_type.nil?
  puts "2: " + platform.to_s
  puts "3: " + command_type.to_s
  mapping = $platform_application_mapping[platform][command_type]
  # raise "No platform application mapping found for platform:" + platform.to_s + " command_type: " + command_type if mapping.nil?
  return mapping
end

def set_volume(active_player)
  # case active_player do
  #      when 'mpv'

  #      when
end



command_attributes = {
  :deutschlandfunk             => [:audio_stream,      'http://www.deutschlandradio.de/streaming/dlf_hq_ogg.m3u'    ],
  :deutschlandradio_kultur     => [:audio_stream,      'http://www.deutschlandradio.de/streaming/dkultur_hq_ogg.m3u'],
  :dradio_wissen               => [:audio_stream,      'http://dradio-ogg-dwissen-l.akacast.akamaistream.net/7/192/135496/v1/gnl.akacast.akamaistream.net/dradio_ogg_dwissen_l'],

  :tagesschau                  => [:video_stream,      lambda { video_feed_url_to_video_url 'http://www.tagesschau.de/export/video-podcast/webxl/tagesschau/'}],
  :tagesschau_latest_news_show => [:video_stream,      lambda { video_feed_url_to_video_url 'http://www.tagesschau.de/download/podcast/index.html' }],

  :marvel_epic_soundtrack      => [:audio_file,        '/home/pi/local/media/music/1_Hour_Epic_Battle_Marvel_Music.opus'],
  :epic_soundtrack_1           => [:audio_file,        '/home/pi/local/media/music/epic_2.opus'],


  :volume0                     => [:set_volume,        '0'  ],
  :volume20                    => [:set_volume,        '20' ],
  :volume30                    => [:set_volume,        '30' ],
  :volume40                    => [:set_volume,        '40' ],
  :volume50                    => [:set_volume,        '50' ],
  :volume60                    => [:set_volume,        '60' ],
  :volume70                    => [:set_volume,        '70' ],
  :volume80                    => [:set_volume,        '80' ],
  :volume90                    => [:set_volume,        '90' ],
  :volume100                   => [:set_volume,        '100'],

  :pause                       => [:mpv_set_property,  'pause',     'toggle'],
  # :stop                        => [:mpv_set_property,  'stop'],
  :stop                        => [:stop,  'stop'],

  :ignore                      => [:ignore],

  :quit                        => [:quit],
}

keyboard_mapping = {
  '1' => :volume0,
  '2' => :volume20,
  '3' => :volume30,
  '4' => :volume40,
  '5' => :volume50,
  '6' => :volume60,
  '7' => :volume70,
  '8' => :volume80,
  '9' => :volume90,
  '0' => :volume100,
  'ß' => :ignore,
  '´' => :ignore,

  'q' => :stop,
  'w' => :deutschlandfunk,
  'e' => :deutschlandradio_kultur,
  'r' => :dradio_wissen,
  't' => :ignore,
  'z' => :ignore,
  'u' => :ignore,
  'i' => :ignore,
  'o' => :ignore,
  'p' => :ignore,
  'ü' => :ignore,
  '+' => :ignore,

  'a' => :tagesschau,
  's' => :tagesschau_latest_news_show,
  'd' => :ignore,
  'f' => :ignore,
  'g' => :ignore,
  'h' => :ignore,
  'j' => :ignore,
  'k' => :ignore,
  'l' => :ignore,
  'ö' => :ignore,
  'ä' => :ignore,
  '#' => :ignore,

  'y' => :marvel_epic_soundtrack,
  'x' => :epic_soundtrack_1,
  'c' => :ignore,
  'v' => :ignore,
  'b' => :ignore,
  'n' => :ignore,
  'm' => :ignore,
  ',' => :ignore,
  '.' => :ignore,
  '-' => :quit,
}

# module OMX
#   class Server < MPV::Server
#   end
# end

platform = platform()
puts 'Platform: ' + platform.to_s
puts "Load modules"
load_modules required_modules[platform]
mpv_session = nil
puts "start MPV background session"
puts Benchmark.measure {
  mpv_session = MPV::Session.new # contains both a MPV::Server and a MPV::Client
}.real
puts "done"
omx_session = nil
# if platform == :raspberry
#   puts "start OMX background session"
#   puts Benchmark.measure {
#     omx_session = Omxplayer.instance
#     # omx_session.open("silence_60.oga")
#     omx_session.open("sintel-1280-stereo.mp4")
#   }.real
#   puts 'sleep'
#   sleep 10
#   puts 'done'
#   omx_session.action(:pause)
# end

mpv_session.callbacks << MPV::Callback.new(self, :something_happened)
# pp   session.set_property "pause", true
puts 'Version'
puts mpv_session.command "get_version"

puts "Command loop started.\n"


quit = false
while (1) do
  begin
    pressed_key = STDIN.getch
    puts "-----------------------------------"
    if keyboard_mapping.has_key? pressed_key
      action = keyboard_mapping[pressed_key]
    else
      action = :stop
    end

    command = command_attributes[action]
    if command.nil?
      command=[nil, nil]
    end
    puts ">>>" + command[0].to_s
    app_mapping = platform_mapping(platform(), command[0])
    puts ">>>"
    pp app_mapping.to_s
    detailed_application_command = $detailed_application_command[app_mapping]

    cmd = {:platform                          => platform(),
           :key                               => pressed_key,
           :key_has_mapping                   => keyboard_mapping.has_key?(pressed_key),
           :high_level_action                 => action,
           :command_type                      => command[0],
           :command_param                     => command[1],
           :evaluated_command_param           => if command[1].respond_to? :call then command[1].call else command[1] end,
           :command_has_platform_application  => app_mapping != nil,
           :application                       => app_mapping,
           :detailed_application_command      => detailed_application_command
          }
    #         :application                       => app_mapping[0],
    #         :application_command               => app_mapping[1]

    pp cmd
    puts


    # case cmd[:command_type]
    case cmd[:command_type]
    when :audio_stream, :audio_file
      puts "audio_stream"
      case cmd[:detailed_application_command][0]
      when 'mpv'
        puts "mpv"
        # mpv_session.command cmd[:detailed_application_command[1]], cmd[:detailed_application_command[2]]
        mpv_session.command cmd[:detailed_application_command][2], cmd[:evaluated_command_param]
      when 'omx'
        puts "omx"
      else
        raise "What is: " + cmd[:detailed_application_command][0].to_s
      end
    when :video_stream
      puts "video_stream"
      case cmd[:detailed_application_command][0]
      when 'mpv'
        puts "mpv"
        # mpv_session.command cmd[:detailed_application_command[1]], cmd[:detailed_application_command[2]]
        mpv_session.command cmd[:detailed_application_command][2], cmd[:evaluated_command_param]
      when 'omx'
        puts "omx"
        omx_session = Omxplayer.instance
        omx_session.open(cmd[:evaluated_command_param])
      # omx_session.
      else
        raise "What is: " + cmd[:detailed_application_command][0].to_s
      end
    when :mpv_set_property
      puts "mpv_set_property"
      mpv_session.set_property cmd[:command_param]# , command[2]
    when :ignore
      puts "ignore"
      continue
    when :stop
      puts "stop"
      omx_session.action(:quit)
      mpv_session.set_property 'pause', 'true'
    when :quit
      puts "quit"
      quit = true
      break
    end

  rescue Exception => e
    puts e.message
    puts e.backtrace.inspect
    quit = true
  end

  if quit == true
    break
  end
end

if omx_session != nil?
  omx_session.action(:quit)
end

mpv_session.quit!
